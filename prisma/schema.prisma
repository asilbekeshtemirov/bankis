generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String?
  googleId   String?  @unique
  firstName  String
  lastName   String?
  phone      String   @unique
  isActive   Boolean  @default(true)
  roleId     String
  languageId String
  telegramId String?  @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  role          Role          @relation(fields: [roleId], references: [id])
  language      Language      @relation(fields: [languageId], references: [id])
  accounts      Account[]
  otpCodes      OtpCode[]
  transfersFrom Transaction[] @relation("FromUser")
  transfersTo   Transaction[] @relation("ToUser")

  @@map("users")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  displayName String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  
  users User[]

  @@map("roles")
}

model Language {
  id        String   @id @default(uuid())
  code      String   @unique 
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users        User[]
  translations Translation[]

  @@map("languages")
}

model Translation {
  id         String   @id @default(uuid())
  languageId String
  key        String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  language Language @relation(fields: [languageId], references: [id])

  @@unique([languageId, key])
  @@map("translations")
}

model Account {
  id            String   @id @default(uuid())
  accountNumber String   @unique
  balance       Decimal  @default(0) @db.Decimal(15, 2)
  currency      String   @default("UZS")
  isActive      Boolean  @default(true)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user             User          @relation(fields: [userId], references: [id])
  transactionsFrom Transaction[] @relation("FromAccount")
  transactionsTo   Transaction[] @relation("ToAccount")

  @@map("accounts")
}

model Transaction {
  id            String            @id @default(uuid())
  fromAccountId String?
  toAccountId   String?
  fromUserId    String
  toUserId      String
  amount        Decimal           @db.Decimal(15, 2)
  fee           Decimal           @default(0) @db.Decimal(15, 2)
  status        TransactionStatus @default(PENDING)
  type          TransactionType
  description   String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt


  fromAccount Account? @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccount   Account? @relation("ToAccount", fields: [toAccountId], references: [id])
  fromUser    User     @relation("FromUser", fields: [fromUserId], references: [id])
  toUser      User     @relation("ToUser", fields: [toUserId], references: [id])

  @@map("transactions")
}

model OtpCode {
  id        String   @id @default(uuid())
  userId    String
  code      String
  type      OtpType
  isUsed    Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())


  user User @relation(fields: [userId], references: [id])

  @@map("otp_codes")
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum TransactionType {
  TRANSFER
  DEPOSIT
  WITHDRAWAL
  FEE
}

enum OtpType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  TRANSACTION_VERIFICATION
  LOGIN_VERIFICATION
}
